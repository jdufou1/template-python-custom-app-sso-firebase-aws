name: Terraform Workflow

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

jobs:
  terraform_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: google-cloud
    if: github.event_name == 'push'
    env:
      TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
      TF_VAR_region: ${{ secrets.REGION }}
      TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GCP
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          project_id: ${{ secrets.PROJECT_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.tfplan

      - name: Upload Plan
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: plan.tfplan

      - name: Comment Plan
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.tfplan', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Terraform Plan:\n\`\`\`terraform\n${plan}\n\`\`\``
            });

  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    if: github.event.inputs.action == 'apply'
    needs: terraform_plan
    env:
      TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
      TF_VAR_region: ${{ secrets.REGION }}
      TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GCP
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          project_id: ${{ secrets.PROJECT_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download Plan
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan
          path: .

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve plan.tfplan

  terraform_destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    environment: production
    if: github.event.inputs.action == 'destroy'
    env:
      TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
      TF_VAR_region: ${{ secrets.REGION }}
      TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GCP
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          project_id: ${{ secrets.PROJECT_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_NAME }}"

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve
